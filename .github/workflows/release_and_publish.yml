name: Release and Publish

on:
  pull_request:
    branches:
      - main
    types:
      - closed

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  deploy_setup:
    if: |
      contains(github.event.pull_request.labels.*.name, 'ready')
      && github.event.pull_request.merged == true
    name: 'Deploy - Setup Application'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Step 0 - üìÅ Cache node modules
        uses: actions/cache@v3
        id: cache-npm
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Step 1 - ‚öôÔ∏è Install Dependencies
        run: npm install

  deploy_validate_linters_and_code_format:
    needs: deploy_setup
    name: 'Deploy - Validate Linters and Code Format'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Step 0 - üìÅ Cache node modules
        uses: actions/cache@v3
        id: cache-npm
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 1 - üß™ Run eslint linter
        run: npm run eslint:check
      - name: Step 2 - üß™üß™ Run prettier
        run: npm run prettier:check

  deploy_tests:
    needs: deploy_validate_linters_and_code_format
    name: 'Run tests'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Step 0 - üìÅ Cache node modules
        uses: actions/cache@v3
        id: cache-npm
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 1 - üß™ Run tests
        run: npm run test

  build:
    needs: deploy_tests
    name: 'Build application bundle'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Step 0 - üìÅ Cache node modules
        uses: actions/cache@v3
        id: cache-npm
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 1 - üìÅ Cache build dist
        uses: actions/cache@v3
        env:
          cache-name: cache-build-dist
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 2 - üõ†Ô∏è Build application bundle
        run: |
          npm run build
          if [ ! -d "dist" ]; then
            echo "‚ö†Ô∏è Error: dist folder does not exist."
            exit 1
          fi

  release_and_publish:
    needs: build
    name: 'Release and Publish'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18']
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '30'
          token: ${{ secrets.AUTOMATION_GITHUB_TOKEN }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
          registry-url: https://registry.npmjs.org/
      - name: Step 0 - üìÅ Cache node modules
        uses: actions/cache@v3
        id: cache-npm
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
            dist
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 1 - üìÅ Cache build dist
        uses: actions/cache@v3
        env:
          cache-name: cache-build-dist
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 2 - ‚öôÔ∏è Setup GitHub Config
        run: |
          git config user.name "ü§ñ DailyBot"
          git config user.email "ops@dailybot.com"
      - name: Step 3 - üìÑ Set GitHub release content "BODY" env var
        run: |
          bash get_github_release_log.sh
          if [[ ! -f git_logs_output.txt ]]; then
            echo "‚ö†Ô∏è No description found for release body content."
            exit 1
          fi
      - name: Step 4 -üîÑ Prepare release
        run: |
          npm run release
          git push --follow-tags origin main
      - name: Step 5 - üè∑Ô∏è Set GitHub release "TAG" env vars
        run: |
          GITHUB_RELEASE_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          if [[ -z $GITHUB_RELEASE_TAG ]]; then
            echo "‚ö†Ô∏è No release tag found."
            exit 1
          fi
          echo "::set-env name=GITHUB_RELEASE_TAG::$GITHUB_RELEASE_TAG"
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - name: Step 6 - üöÄ Publish GitHub release
        uses: ncipollo/release-action@v1
        with:
          name: Release ${{ env.GITHUB_RELEASE_TAG }}
          tag: ${{ env.GITHUB_RELEASE_TAG }}
          bodyFile: git_logs_output.txt
          token: ${{ secrets.AUTOMATION_GITHUB_TOKEN }}
      - name: Step 7 - üöÄüöÄ Publish npm package
        id: publish_npm_package
        run: |
          if [ ! -d "dist" ]; then
            echo "‚ö†Ô∏è Error: dist folder does not exist."
            exit 1
          fi
          npm publish
          # Set npm version as output for next steps
          echo "package_version=$(npm pkg get version)" >> $GITHUB_OUTPUT
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    outputs:
      package_version: ${{ steps.publish_npm_package.outputs.package_version }}

  cleanup_caches:
    needs: release_and_publish
    name: 'Cleanup caches'
    runs-on: ubuntu-latest
    steps:
      - name: Step 1 - üóëÔ∏è Trigger cleanup caches workflow
        run: |
          curl --location "https://api.github.com/repos/$GITHUB_REPOSITORY/dispatches" \
            --header "Authorization: token ${{ secrets.AUTOMATION_GITHUB_TOKEN }}" \
            --header "Content-Type: application/json" \
            --data '{
                "event_type": "cleanup_caches",
                "client_payload": {}
            }'

  notify_on_channel:
    needs:
      [deploy_setup, deploy_validate_linters_and_code_format, deploy_tests, build, release_and_publish, cleanup_caches]
    name: 'Notify on channel'
    if: |
      always()
      && contains(github.event.pull_request.labels.*.name, 'ready')
      && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Step 1 - üîî Send notification on channel
        env:
          NEEDS_JSON: ${{ toJSON(needs) }}
        run: |
          NOTIFICATION_MESSAGE="*WorkFlow: <https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID|$GITHUB_WORKFLOW>*"$'\n'
          NOTIFICATION_MESSAGE+="*Repository:* $GITHUB_REPOSITORY"$'\n'
          NOTIFICATION_MESSAGE+="*User Actor:* $GITHUB_ACTOR"$'\n'
          PACKAGE_VERSION=$(echo "${NEEDS_JSON}" | jq -r ".release_and_publish.outputs.package_version")
          if [ ! -z "$PACKAGE_VERSION" ]; then
            NOTIFICATION_MESSAGE+="*New Version:* $PACKAGE_VERSION"$'\n'
          fi
          NOTIFICATION_MESSAGE+="*Jobs:*"$'\n'
          INDEX=1
          NEEDS_ORDER=("deploy_setup" "deploy_validate_linters_and_code_format" "deploy_tests" "build" "release_and_publish" "cleanup_caches")
          DEPLOYMENT_SUCCESS="true"

          for key in "${NEEDS_ORDER[@]}"; do
            RESULT=$(echo "${NEEDS_JSON}" | jq -r ".${key}.result")
            if [ "$RESULT" == "success" ]; then
              EMOJI="‚úÖ"
            elif [ "$RESULT" == "failure" ]; then
              DEPLOYMENT_SUCCESS="false"
              EMOJI="‚ùå"
            elif [ "$RESULT" == "skipped" ]; then
              DEPLOYMENT_SUCCESS="false"
              EMOJI="‚è©"
            else
              DEPLOYMENT_SUCCESS="false"
              EMOJI="‚ùì"
            fi
            NOTIFICATION_MESSAGE+="‚Ä¢ *Job $INDEX:* $key $EMOJI"$'\n'
            INDEX=$((INDEX+1))
          done

          if [ "$DEPLOYMENT_SUCCESS" == "true" ]; then
            NOTIFICATION_MESSAGE="*#$GITHUB_RUN_NUMBER ($GITHUB_REF_NAME) - üöÄ DEPLOYMENT SUCCESS:*"$'\n\n'"$NOTIFICATION_MESSAGE"
          else
            NOTIFICATION_MESSAGE="*#$GITHUB_RUN_NUMBER ($GITHUB_REF_NAME) - @here ‚ö†Ô∏è DEPLOYMENT FAILED:*"$'\n\n'"$NOTIFICATION_MESSAGE"
          fi

          JSON_DATA=$(jq -n \
                        --arg msg "$NOTIFICATION_MESSAGE" \
                        --arg channel "${{ secrets.DAILYBOT_NOTIFICATION_CHANNEL }}" \
                        '{message: $msg, target_channels: [$channel]}')
          curl --location 'https://api.dailybot.com/v1/send-message/' \
            --header "X-API-KEY: ${{ secrets.DAILYBOT_API_KEY }}" \
            --header 'Content-Type: application/json' \
            --data "$JSON_DATA"
