name: Release and Publish

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  setup:
    name: 'Setup Application'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Step 0 - 📁 Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Step 1 - ⚙️ Install Dependencies
        run: npm install

  validate_linters_and_code_format:
    needs: setup
    name: 'Validate Linters and Code Format'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Step 0 - 📁 Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 1 - 🧪 Run eslint linter
        run: npm run eslint:check
      - name: Step 2 - 🧪🧪 Run prettier
        run: npm run prettier:check

  tests:
    needs: validate_linters_and_code_format
    name: 'Run tests'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Step 0 - 📁 Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 1 - 🧪 Run tests
        run: npm run test

  build:
    needs: tests
    name: 'Build application bundle'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Step 0 - 📁 Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 1 - 📁 Cache build dist
        uses: actions/cache@v3
        env:
          cache-name: cache-build-dist
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 2 - 🛠️ Build application bundle
        run: |
          npm run build
          if [ ! -d "dist" ]; then
            echo "⚠️ Error: dist folder does not exist."
            exit 1
          fi

  release_and_publish:
    needs: build
    name: 'Release and Publish'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18']
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '30'
          token: ${{ secrets.AUTOMATION_GITHUB_TOKEN }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
          registry-url: https://registry.npmjs.org/
      - name: Step 0 - 📁 Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
            dist
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 1 - 📁 Cache build dist
        uses: actions/cache@v3
        env:
          cache-name: cache-build-dist
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 2 - ⚙️ Setup GitHub Config
        run: |
          git config user.name "🤖 DailyBot"
          git config user.email "ops@dailybot.com"
      - name: Step 3 - 📄 Set GitHub release content "BODY" env var
        run: |
          bash get_github_release_log.sh
          if [[ ! -f git_logs_output.txt ]]; then
            echo "⚠️ No description found for release body content."
            exit 1
          fi
      - name: Step 4 -🔄 Prepare release
        run: |
          npm run release
          git push --follow-tags origin main
      - name: Step 5 - 🏷️ Set GitHub release "TAG" env vars
        run: |
          GITHUB_RELEASE_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          if [[ -z $GITHUB_RELEASE_TAG ]]; then
            echo "⚠️ No release tag found."
            exit 1
          fi
          echo "::set-env name=GITHUB_RELEASE_TAG::$GITHUB_RELEASE_TAG"
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - name: Step 6 - 🚀 Publish GitHub release
        uses: ncipollo/release-action@v1
        with:
          name: Release ${{ env.GITHUB_RELEASE_TAG }}
          tag: ${{ env.GITHUB_RELEASE_TAG }}
          bodyFile: git_logs_output.txt
          token: ${{ secrets.AUTOMATION_GITHUB_TOKEN }}
      - name: Step 7 - 🚀🚀 Publish npm package
        run: |
          if [ ! -d "dist" ]; then
            echo "⚠️ Error: dist folder does not exist."
            exit 1
          fi
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  cleanup_caches:
    needs: tests
    name: 'Cleanup caches'
    runs-on: ubuntu-latest
    steps:
      - name: Step 1 - 🗑️ Trigger cleanup caches workflow
        run: |
          curl --location "https://api.github.com/repos/$GITHUB_REPOSITORY/dispatches" \
            --header "Authorization: token ${{ secrets.AUTOMATION_GITHUB_TOKEN }}" \
            --header "Content-Type: application/json" \
            --data '{
                "event_type": "cleanup_caches",
                "client_payload": {}
            }'
