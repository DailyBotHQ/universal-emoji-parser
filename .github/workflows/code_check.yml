name: Code Check
on:
  push:
    branches:
      - '*'
      - '!main'

jobs:
  setup:
    name: 'Setup Application'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Step 0 - 📁 Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Step 1 - ⚙️ Install Dependencies
        run: npm install

  validate_linters_and_code_format:
    needs: setup
    name: 'Validate Linters and Code Format'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Step 0 - 📁 Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 1 - 🧪 Run eslint linter
        run: npm run eslint:check
      - name: Step 2 - 🧪🧪 Run prettier
        run: npm run prettier:check

  tests:
    needs: validate_linters_and_code_format
    name: 'Run tests'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Step 0 - 📁 Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 1 - 🧪 Run tests
        run: |
          npm run test
          exit 1

  notify_on_channel:
    needs: [setup, validate_linters_and_code_format, tests]
    name: 'Notify on channel'
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Step 1 - 🔔 Send notification on channel
        env:
          NEEDS: ${{ toJSON(needs) }}
        run: |
          ESCAPED_NEEDS=$(echo "${NEEDS}" | jq -c .)
          echo "Deployment success: $ESCAPED_NEEDS"
          curl --location 'https://api.dailybot.com/v1/send-message/' \
            --header "X-API-KEY: ${{ secrets.DAILYBOT_API_KEY }}" \
            --header 'Content-Type: application/json' \
            --data '{
              "message": "Deployment success: '$ESCAPED_NEEDS'",
              "target_channels": ["${{ secrets.DAILYBOT_NOTIFICATION_CHANNEL }}"]
            }'

