name: Code Check
on:
  push:
    branches:
      - '*'
      - '!main'

jobs:
  setup:
    name: 'Setup Application'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Step 0 - üìÅ Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Step 1 - ‚öôÔ∏è Install Dependencies
        run: npm install

  validate_linters_and_code_format:
    needs: setup
    name: 'Validate Linters and Code Format'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Step 0 - üìÅ Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 1 - üß™ Run eslint linter
        run: npm run eslint:check
      - name: Step 2 - üß™üß™ Run prettier
        run: npm run prettier:check

  tests:
    needs: validate_linters_and_code_format
    name: 'Run tests'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Step 0 - üìÅ Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 1 - üß™ Run tests
        run: |
          npm run test
          exit 1

  notify_on_channel:
    needs: [setup, validate_linters_and_code_format, tests]
    name: 'Notify on channel'
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Step 1 - üîî Send notification on channel
        env:
          NEEDS_JSON: ${{ toJSON(needs) }}
        run: |
          NOTIFICATION_MESSAGE="*WorkFlow: <https://github.com/DailyBotHQ/universal-emoji-parser/actions/runs/$GITHUB_RUN_ID|$GITHUB_WORKFLOW>*"$'\n'
          NOTIFICATION_MESSAGE+="*Repository:* $GITHUB_REPOSITORY"$'\n'
          INDEX=1
          NEEDS_ORDER=("setup" "validate_linters_and_code_format" "tests")
          DEPLOYMENT_SUCCESS="true"

          for key in "${NEEDS_ORDER[@]}"; do
            RESULT=$(echo "${NEEDS_JSON}" | jq -r ".${key}.result")
            if [ "$RESULT" == "success" ]; then
              EMOJI="‚úÖ"
            elif [ "$RESULT" == "failure" ]; then
              DEPLOYMENT_SUCCESS="false"
              EMOJI="‚ùå"
            elif [ "$RESULT" == "skipped" ]; then
              DEPLOYMENT_SUCCESS="false"
              EMOJI="‚è©"
            else
              DEPLOYMENT_SUCCESS="false"
              EMOJI="‚ùì"
            fi
            NOTIFICATION_MESSAGE+="‚Ä¢ *Job $INDEX:* $key $EMOJI"$'\n'
            INDEX=$((INDEX+1))
          done

          if [ "$DEPLOYMENT_SUCCESS" == "true" ]; then
            NOTIFICATION_MESSAGE="*üöÄ DEPLOYMENT SUCCESS:*"$'\n\n'"$NOTIFICATION_MESSAGE"
          else
            NOTIFICATION_MESSAGE="*‚ö†Ô∏è DEPLOYMENT FAILED:*"$'\n\n'"$NOTIFICATION_MESSAGE"
          fi

          JSON_DATA=$(jq -n \
                        --arg msg "$NOTIFICATION_MESSAGE" \
                        --arg channel "${{ secrets.DAILYBOT_NOTIFICATION_CHANNEL }}" \
                        '{message: $msg, target_channels: [$channel]}')
          curl --location 'https://api.dailybot.com/v1/send-message/' \
            --header "X-API-KEY: ${{ secrets.DAILYBOT_API_KEY }}" \
            --header 'Content-Type: application/json' \
            --data "$JSON_DATA"
